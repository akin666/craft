/*
 * ALLOCATIONpool.hpp
 *
 *  Created on: 7.12.2012
 *      Author: akin
 */

#ifndef ALLOCATIONPOOL_HPP_
#define ALLOCATIONPOOL_HPP_

#include <vector>
#include <stdtypes>

namespace allocation {

template <class CDataType , size_t growth = 256>
class Pool
{
private:
	typedef std::vector<CDataType*> CDataTypeSet;

	CDataTypeSet frees;
	std::vector<char*> allocs;
public:
	Pool()
	{
	}

	~Pool()
	{
		clear();
	}

	ducktype bool initialize()
	{
		return true;
	}

	template<typename... Args>
	ducktype CDataType *construct( Args... args )
	{
		if( frees.size() < 1 )
		{
			add( growth );
		}

		CDataType *tmp = frees.back();
		frees.pop_back();

		return new(tmp)CDataType( args... );
	}

	ducktype void destruct( CDataType *unit )
	{
		unit->~CDataType();
		frees.push_back( unit );
	}

	ducktype void add( size_t count )
	{
		size_t size = sizeof( CDataType );
		size_t alignment = std::alignment_of<CDataType>();
		
		size_t bytecount = count * size + alignment;
		
		char *data = new char[ bytecount ];
		allocs.push_back( data );
		
		long ptr = (long)data;
		if( (ptr % alignment != 0) )
		{
			ptr += ( alignment - (ptr % alignment) );
		}
		
		CDataType *array = (CDataType*)ptr;
		
		for( size_t i = 0 ; i < count ; ++i )
		{
			frees.push_back( &array[i] );
		}
	}

	ducktype void clear()
	{
		frees.clear();
		for( auto iter = allocs.begin() ; iter != allocs.end() ; ++iter )
		{
			delete[] *iter;
		}
		allocs.clear();
	}

	ducktype void sort()
	{
		// Sort the free allocations, so that the low address ones are first.
	}
};

} //namespace entity
#endif // ENTITYDATAPOOL_HPP_
