/*
 * allocator
 *
 *  Created on: 16.6.2012
 *      Author: akin
 *
 *      TODO!
 */

#ifndef ALLOCATIONSIMPLE_HPP_
#define ALLOCATIONSIMPLE_HPP_

#include <stdtypes>

namespace allocation {

template <class CDataType>
class Simple
{
private:
	typedef std::vector<CDataType*> CDataTypeSet;
	CDataTypeSet allocs;
public:
	Simple()
	{
	}
	
	~Simple()
	{
		clear();
	}
	
	ducktype bool initialize()
	{
		return true;
	}

	template<typename... Args>
	ducktype CDataType *construct( Args... args )
	{
		auto *data = new CDataType( args... );
		allocs.push_back( data );
		// data->CDataType( args... );
		return data;
	}

	ducktype void destruct( CDataType* data )
	{
		// data->~CDataType();
		delete data;
		
		for( auto iter = allocs.begin() ; iter != allocs.end() ; ++iter )
		{
			if( data == *iter )
			{
				allocs.erase( iter );
				return;
			}
		}
	}

	ducktype void add( size_t count )
	{
	}

	ducktype void clear()
	{
		for( auto iter = allocs.begin() ; iter != allocs.end() ; ++iter )
		{
			delete *iter;
		}
		allocs.clear();
	}

	ducktype void sort()
	{
	}
};

} // namespace allocation
#endif // ALLOCATIONSIMPLE_HPP_
