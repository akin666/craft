/*
 * allocationstack.hpp
 *
 *  Created on: 9.12.2012
 *      Author: akin
 */

#ifndef ALLOCATIONSTACK_HPP_
#define ALLOCATIONSTACK_HPP_

#include <stdtypes>

namespace alloction {

class Stack
{
public:
	Stack()
	{
	}

	~Stack()
	{
		clear();
	}
	
	ducktype bool initialize()
	{
		return true;
	}

	template<typename... Args>
	ducktype CDataType *construct()
	{
		auto *data = new CDataType( args... );
		allocs.push_back( data );
		// data->CDataType( args... );
		return data;
	}

	ducktype void destruct( CDataType* data )
	{
		// data->~CDataType();
		delete data;
		
		for( auto iter = allocs.begin() ; iter != allocs.end() ; ++iter )
		{
			if( data == *iter )
			{
				allocs.erase( iter );
				return;
			}
		}
	}

	ducktype void add( size_t count )
	{
	}

	ducktype void clear()
	{
		for( auto iter = allocs.begin() ; iter != allocs.end() ; ++iter )
		{
			delete *iter;
		}
		allocs.clear();
	}

	ducktype void sort()
	{
	}
};

} // namespace alloction
#endif // ALLOCATIONSTACK_HPP_
